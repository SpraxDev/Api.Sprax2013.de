generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views", "tracing"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id            String   @id @db.Uuid
  nameLowercase String   @map("name_lowercase")
  raw           Json
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz()
  firstSeen     DateTime @default(now()) @map("first_seen") @db.Timestamptz()
  deleted       Boolean  @default(false)

  profileRecentSkins ProfileRecentSkin[]
  profileRecentCapes ProfileRecentCape[]

  @@map("profiles")
}

view ProfileCache {
  id            String @id @db.Uuid
  nameLowercase String @map("name_lowercase")
  raw           Json
  ageInSeconds  Int    @map("age_in_seconds")

  @@map("profile_cache")
}

model ProfileRecentSkin {
  profileId      String   @map("profile_id") @db.Uuid
  skinImageId    BigInt   @map("skin_image_id")
  firstSeenUsing DateTime @default(now()) @map("first_seen_using") @db.Timestamptz()
  lastSeenUsing  DateTime @default(now()) @map("last_seen_using") @db.Timestamptz()

  profile Profile   @relation(fields: [profileId], references: [id])
  skin    SkinImage @relation(fields: [skinImageId], references: [id])

  @@id([profileId, skinImageId])
  @@map("profile_recent_skins")
}

model ProfileRecentCape {
  profileId      String   @map("profile_id") @db.Uuid
  capeId         BigInt   @map("cape_id")
  firstSeenUsing DateTime @default(now()) @map("first_seen_using") @db.Timestamptz()
  lastSeenUsing  DateTime @default(now()) @map("last_seen_using") @db.Timestamptz()

  profile Profile @relation(fields: [profileId], references: [id])
  cape    Cape    @relation(fields: [capeId], references: [id])

  @@id([profileId, capeId])
  @@map("profile_recent_capes")
}

model SkinUrl {
  url              String   @id
  imageId          BigInt   @map("image_id")
  textureValue     String?  @map("texture_value")
  textureSignature String?  @map("texture_signature")
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz()

  image SkinImage @relation(fields: [imageId], references: [id])

  @@map("skin_urls")
}

model SkinImage {
  id                BigInt   @id @default(dbgenerated("generate_snowflake('skin_images_id_seq'::text)"))
  imageSha256       Bytes    @unique @map("image_sha256")
  imageBytes        Bytes    @map("image_bytes")
  normalizedImageId BigInt?  @map("normalized_image_id")
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamptz()

  normalizedImage         SkinImage?  @relation("NormalizedSkin", fields: [normalizedImageId], references: [id])
  knownNonNormalizedSkins SkinImage[] @relation("NormalizedSkin")

  skinUrls           SkinUrl[]
  profileRecentSkins ProfileRecentSkin[]

  @@map("skin_images")
}

model Cape {
  id          BigInt   @id @default(dbgenerated("generate_snowflake('capes_id_seq'::text)"))
  type        CapeType
  imageSha256 Bytes    @map("image_sha256")
  imageBytes  Bytes    @map("image_bytes")
  mimeType    String   @map("mime_type")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz()

  profileRecentCape ProfileRecentCape[]
  capeUrls          CapeUrl[]

  @@unique([type, imageSha256])
  @@map("capes")
}

model CapeUrl {
  url    String @id
  capeId BigInt @map("cape_id")

  cape Cape @relation(fields: [capeId], references: [id])

  @@map("cape_urls")
}

enum CapeType {
  MOJANG
  OPTIFINE
  LABYMOD
}

model ServerBlocklistChanges {
  sha1         Bytes
  changeIsAdd  Boolean  @map("change_is_add")
  changeSeenAt DateTime @default(now()) @map("change_seen_at") @db.Timestamptz()

  @@id([sha1, changeSeenAt])
  @@index([sha1, changeSeenAt(sort: Desc)])
  @@map("server_blocklist_changes")
}

model ServerBlocklistHostHashes {
  sha1      Bytes    @id
  host      String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()

  @@index([host])
  @@map("server_blocklist_host_hashes")
}

view ServerBlocklist {
  sha1 Bytes   @id
  host String?

  @@map("server_blocklist")
}

model ServerStatusHistory {
  id                BigInt   @id @default(autoincrement())
  host              String
  port              Int
  rttInMs           Int      @map("rtt_in_ms")
  resolvedIp        String   @map("resolved_ip") @db.Inet
  wasLegacyProtocol Boolean  @map("was_legacy_protocol")
  protocolVersion   Int      @map("protocol_version")
  onlinePlayers     Int      @map("online_players")
  faviconSha256     Bytes?   @map("favicon_sha256")
  rawStatus         Json     @map("raw_status") // TODO: We probably want to delete the contents after some time to save space?
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamptz()

  favicon ServerStatusFavicon? @relation(fields: [faviconSha256], references: [sha256])

  @@index([host, port])
  @@index([createdAt(sort: Desc)])
  @@map("server_status_history")
}

model ServerStatusFavicon {
  sha256 Bytes @id
  image  Bytes

  serverStatusHistory ServerStatusHistory[]

  @@map("server_status_favicon")
}

view ServerStatusCache {
  id                BigInt  @id
  host              String
  port              Int
  rttInMs           Int     @map("rtt_in_ms")
  resolvedIp        String  @map("resolved_ip") @db.Inet
  wasLegacyProtocol Boolean @map("was_legacy_protocol")
  rawStatus         Json    @map("raw_status")

  ageInSeconds Int @map("age_in_seconds")

  @@map("server_status_cache")
}

model ImportTask {
  id             BigInt            @id @default(autoincrement())
  payload        Bytes
  payloadType    ImportPayloadType @map("payload_type")
  state          ImportTaskState   @default(QUEUED)
  stateUpdatedAt DateTime          @default(now()) @map("state_updated_at") @db.Timestamptz()
  createdAt      DateTime          @default(now()) @map("created_at") @db.Timestamptz()

  @@unique([payloadType, payload])
  @@map("import_tasks")
}

enum ImportPayloadType {
  UUID
  USERNAME
  PROFILE_TEXTURE_VALUE
  UUID_UPDATE_THIRD_PARTY_CAPES
  SKIN_IMAGE
}

enum ImportTaskState {
  QUEUED
  IMPORTED
  NO_CHANGES
  ERROR
}
