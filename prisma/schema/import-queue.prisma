enum ImportPayloadType {
  UUID
  USERNAME
  PROFILE_TEXTURE_VALUE
  UUID_UPDATE_THIRD_PARTY_CAPES
  SKIN_IMAGE
}

enum ImportTaskState {
  QUEUED
  IMPORTED
  NO_CHANGES
  ERROR
}

model ImportTask {
  id             BigInt            @id @default(autoincrement())
  payload        Bytes
  payloadType    ImportPayloadType @map("payload_type")
  state          ImportTaskState   @default(QUEUED)
  stateUpdatedAt DateTime          @default(now()) @map("state_updated_at") @db.Timestamptz()
  createdAt      DateTime          @default(now()) @map("created_at") @db.Timestamptz()
  importGroupId  BigInt?           @map("import_group_id")

  importGroup ImportGroup? @relation(fields: [importGroupId], references: [id])

  @@unique([payloadType, payload])
  @@map("import_tasks")
}

model ImportGroup {
  id                BigInt   @id @default(dbgenerated("generate_snowflake('import_groups_id_seq'::text)"))
  importingApiKeyId BigInt   @map("importing_api_key_id")
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt         DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz()

  done             Boolean @default(false)
  lastErrorMessage String? @map("last_error_message")

  totalParsedPayloads Int @default(0) @map("total_parsed_payloads")
  succeededImports    Int @default(0) @map("succeeded_imports")
  erroredImports      Int @default(0) @map("errored_imports")
  duplicateImports    Int @default(0) @map("duplicate_imports")

  tasks           ImportTask[]
  importingApiKey ApiKey       @relation(fields: [importingApiKeyId], references: [id])

  @@map("import_groups")
}
